import discord
from discord.ext import commands, tasks
from discord import app_commands
import os
import random
import asyncio
import time
import datetime
import re
import subprocess
import sys
import traceback
from keep_alive import keep_alive
from discord.ui import Button, View
from datetime import datetime
from discord.ui import View, Select
from discord.ext import tasks
from collections import defaultdict
from collections import deque
import pymongo
from pymongo import MongoClient
import psutil
import platform

token = os.environ['AQUAMOON']
intents = discord.Intents.all()
start_time = time.time()
client = discord.Client(intents=intents)
bot = commands.Bot(command_prefix="+", intents=intents)

@bot.event
async def on_ready():
    print(f"‚úÖ Le bot {bot.user} est maintenant connect√© ! (ID: {bot.user.id})")

    # Initialisation de l'uptime du bot
    bot.uptime = time.time()
    
    # R√©cup√©ration du nombre de serveurs et d'utilisateurs
    guild_count = len(bot.guilds)
    member_count = sum(guild.member_count for guild in bot.guilds)
    
    # Affichage des statistiques du bot dans la console
    print(f"\nüìä **Statistiques du bot :**")
    print(f"‚û°Ô∏è **Serveurs** : {guild_count}")
    print(f"‚û°Ô∏è **Utilisateurs** : {member_count}")
    
    # Liste des activit√©s dynamiques
    activity_types = [
        discord.Activity(type=discord.ActivityType.watching, name=f"{member_count} Membres"),
        discord.Activity(type=discord.ActivityType.streaming, name=f"{guild_count} Serveurs"),
        discord.Activity(type=discord.ActivityType.streaming, name="Aquamoon"),
    ]
    
    # S√©lection d'une activit√© au hasard
    activity = random.choice(activity_types)
    
    # Choix d'un statut al√©atoire
    status_types = [discord.Status.online, discord.Status.idle, discord.Status.dnd]
    status = random.choice(status_types)
    
    # Mise √† jour du statut et de l'activit√©
    await bot.change_presence(activity=activity, status=status)
    
    print(f"\nüéâ **{bot.user}** est maintenant connect√© et affiche ses statistiques dynamiques avec succ√®s !")

    # Afficher les commandes charg√©es
    print("üìå Commandes disponibles üòä")
    for command in bot.commands:
        print(f"- {command.name}")

    try:
        # Synchroniser les commandes avec Discord
        synced = await bot.tree.sync()  # Synchronisation des commandes slash
        print(f"‚úÖ Commandes slash synchronis√©es : {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"‚ùå Erreur de synchronisation des commandes slash : {e}")

    # Jongler entre diff√©rentes activit√©s et statuts
    while True:
        for activity in activity_types:
            for status in status_types:
                await bot.change_presence(status=status, activity=activity)
                await asyncio.sleep(10)  # Attente de 10 secondes avant de changer l'activit√© et le statut
    for guild in bot.guilds:
        GUILD_SETTINGS[guild.id] = load_guild_settings(guild.id)

# Gestion des erreurs globales pour toutes les commandes
@bot.event
async def on_error(event, *args, **kwargs):
    print(f"Une erreur s'est produite : {event}")
    embed = discord.Embed(
        title="‚ùó Erreur inattendue",
        description="Une erreur s'est produite lors de l'ex√©cution de la commande. Veuillez r√©essayer plus tard.",
        color=discord.Color.red()
    )
    await args[0].response.send_message(embed=embed)
#--------------------------------------------------------- Mot Sensible:
# Liste des mots sensibles
sensitive_words = [
    # Insultes et injures
    "connard", "cr√©tin", "idiot", "imb√©cile", "salopard", "enfoir√©", "m√©chant", "abruti", "d√©bile", "bouffon",
    "clown", "baltringue", "fils de pute", "gros con", "sale type", "ordure", "merdeux", "guignol", "vaurien",
    "tocard", "branleur", "crasseux", "charognard", "rat√©", "b√¢tard", "d√©chet", "parasite",

    # Discrimination et discours haineux
    "raciste", "sexiste", "homophobe", "antis√©mite", "x√©nophobe", "transphobe", "islamophobe", "misogyne", 
    "misandre", "discriminatoire", "supr√©maciste", "extr√©miste", "fasciste", "nazi", "n√©onazi", "dictateur",

    # Violence et criminalit√©
    "viol", "tuer", "assassin", "attaque", "agression", "meurtre", "g√©nocide", "ex√©cution", "kidnapping",
    "prise d'otage", "armes", "fusillade", "terrorisme", "attentat", "jihad", "bombardement", "suicidaire",
    "d√©capitation", "immolation", "torture", "lynchage", "massacre", "pillage", "extermination",

    # Crimes sexuels et exploitation
    "p√©docriminel", "abus", "sexe", "pornographie", "nu", "masturbation", "prostitution", "p√©dophilie", 
    "inceste", "exhibition", "f√©tichisme", "harc√®lement", "traite humaine", "esclavage sexuel", "viol collectif",

    # Drogues et substances illicites
    "drogue", "coca√Øne", "h√©ro√Øne", "crack", "LSD", "ecstasy", "m√©thamph√©tamine", "opium", "cannabis", "alcool", 
    "ivresse", "overdose", "trafic de drogue", "toxicomanie", "drogue de synth√®se", "GHB", "fentanyl",

    # Cybercriminalit√© et piratage
    "hack", "pirater", "voler des donn√©es", "phishing", "ddos", "raid", "flood", "spam", "crasher", "exploiter",
    "ransomware", "trojan", "virus informatique", "keylogger", "backdoor", "brute force", "scam", 
    "usurpation d'identit√©", "darknet", "march√© noir", "cheval de Troie", "spyware", "hame√ßonnage",

    # Fraude et corruption
    "fraude", "extorsion", "chantage", "blanchiment d'argent", "corruption", "pot-de-vin", "abus de pouvoir", 
    "d√©tournement de fonds", "√©vasion fiscale", "fraude fiscale", "march√© noir", "contrefa√ßon",

    # Manipulation et d√©sinformation
    "dictature", "oppression", "propagande", "fake news", "manipulation", "endoctrinement", "secte", 
    "lavage de cerveau", "d√©sinformation",

    # Groupes criminels et troubles sociaux
    "violence polici√®re", "brutalit√©", "crime organis√©", "mafia", "cartel", "milice", "mercenaire", "gu√©rilla",
    "insurrection", "√©meute", "r√©bellion", "coup d'√©tat", "anarchie", "terroriste", "s√©paratiste"
]

ADMIN_ID = 555060734539726862  # ID de l'admin modifi√©

# Dictionnaire pour suivre les messages d'un utilisateur pour l'anti-spam
user_messages = {}

@bot.event
async def on_message(message):
    if message.author.bot:
        return  # Ignore les messages du bot

    # üîπ D√©tection des mots sensibles (toujours active)
    for word in sensitive_words:
        if re.search(rf"\b{re.escape(word)}\b", message.content, re.IGNORECASE):
            print(f"üö® Mot sensible d√©tect√© dans le message de {message.author}: {word}")
            asyncio.create_task(send_alert_to_admin(message, word))
            break  # On arr√™te la boucle d√®s qu'un mot interdit est trouv√©

    # üîπ R√©ponse √† la mention du bot (avant de traiter les autres r√®gles)
    if bot.user.mentioned_in(message) and message.content.strip().startswith(f"<@{bot.user.id}>"):
        embed = discord.Embed(
            title="üëã Besoin d‚Äôaide ?",
            description=(f"Salut {message.author.mention} ! Moi, c‚Äôest **{bot.user.name}**, ton assistant sur ce serveur. ü§ñ\n\n"
                         "üîπ **Pour voir toutes mes commandes :** Appuie sur le bouton ci-dessous ou tape `+aide`\n"
                         "üîπ **Une question ? Un souci ?** Contacte le staff !\n\n"
                         "‚ú® **Profite bien du serveur et amuse-toi !**"),
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=bot.user.avatar.url)
        embed.set_footer(text="R√©ponse automatique ‚Ä¢ Disponible 24/7", icon_url=bot.user.avatar.url)
        
        view = View()
        button = Button(label="üìú Voir les commandes", style=discord.ButtonStyle.primary, custom_id="help_button")

        async def button_callback(interaction: discord.Interaction):
            ctx = await bot.get_context(interaction.message)
            await ctx.invoke(bot.get_command("aide"))
            await interaction.response.send_message("Voici la liste des commandes !", ephemeral=True)

        button.callback = button_callback
        view.add_item(button)

        await message.channel.send(embed=embed, view=view)
        return  # Retourne pour √©viter de faire le reste du traitement si c'est une mention

    # Si le serveur n'a pas de configuration, on ne fait rien d'autre
    if not guild_data:
        await bot.process_commands(message)  # Traite les commandes en pr√©fixe
        return

    # Traite les commandes en pr√©fixe
    await bot.process_commands(message)  # Traite les commandes en pr√©fixe apr√®s tout le reste

async def send_alert_to_admin(message, detected_word):
    """Envoie une alerte priv√©e √† l'admin en cas de mot interdit d√©tect√©."""
    try:
        admin = await bot.fetch_user(ADMIN_ID)
        embed = discord.Embed(
            title="üö® Alerte : Mot sensible d√©tect√© !",
            description=f"Un message contenant un mot interdit a √©t√© d√©tect√© sur le serveur **{message.guild.name}**.",
            color=discord.Color.red(),
            timestamp=datetime.utcnow()
        )
        embed.add_field(name="üìç Salon", value=f"{message.channel.mention}", inline=True)
        embed.add_field(name="üë§ Auteur", value=f"{message.author.mention} (`{message.author.id}`)", inline=True)
        embed.add_field(name="üí¨ Message", value=f"```{message.content}```", inline=False)
        embed.add_field(name="‚ö†Ô∏è Mot d√©tect√©", value=f"`{detected_word}`", inline=True)
        if message.guild:
            embed.add_field(name="üîó Lien vers le message", value=f"[Clique ici]({message.jump_url})", inline=False)
        embed.set_footer(text="Syst√®me de d√©tection automatique", icon_url=bot.user.avatar.url)
        await admin.send(embed=embed)
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de l'envoi de l'alerte : {e}")

#---------------------------------------------------- Bienvenue
WELCOME_CHANNEL_ID = 1355912711807963188

@bot.event
async def on_member_join(member):
    # Envoi du message de bienvenue
    channel = bot.get_channel(WELCOME_CHANNEL_ID)
    if channel:
        embed = discord.Embed(
            title="<a:fete:1172810362261880873> **Bienvenue sur le serveur Aquamoon !** <a:fete:1172810362261880873>",
            description=(
                "<a:paintpalette:1172810412341587970> **Aquamoon** : L'univers cr√©atif o√π la magie de l'imaginaire prend vie ! üåô‚ú®\n\n"
                "üé®‚ú® **Aquamoon** ‚ú®üé®\n\n"
                "#Communautaire #Cr√©atif #Divertissement\n\n"
                "üöÄ **Boost & Avantages** ‚Üí #Nitro\n"
                "üé¨ **Anim√©s & Streaming** ‚Üí #Crunchyroll\n"
                "üñåÔ∏è **Cr√©ation & Design** ‚Üí #√âditeur #Graphiste\n"
                "ü§ù **√âchange & Partage** ‚Üí #Communautaire\n\n"
                "üî• **√âV√âNEMENT √Ä NE PAS MANQUER !** üî•\n"
                "üåô **LA NUIT D‚ÄôAQUAMOON** üåô\n\n"
                "üïí **Ce samedi √† 21H30**\n"
                "üìú *La l√©gende raconte qu‚Äôun soir de nuit, la Lune Aquamoon se r√©veillera et marquera l‚Äôouverture du serveur. Puis, une horde de graphistes et d‚Äô√©diteurs s‚Äôabattra sur le serveur‚Ä¶*\n\n"
                "üîî **Ne rate pas ce moment l√©gendaire !** üî•"
            ),
            color=discord.Color.blue()  # Une couleur qui correspond √† un th√®me cr√©atif et myst√©rieux
        )
        embed.set_image(url="https://github.com/Iseyg91/Aquamoon/blob/main/12-topaz.png?raw=true")

        await channel.send(f"{member.mention}", embed=embed)

    # IMPORTANT : Permet au bot de continuer √† traiter les commandes
    await bot.process_commands(message)


#---------------------------------------------------------------- Moderation

# Gestion des erreurs pour les commandes
AUTHORIZED_USER_ID = 792755123587645461

# üé® Fonction pour cr√©er un embed format√©
def create_embed(title, description, color, ctx, member=None, action=None, reason=None, duration=None):
    embed = discord.Embed(title=title, description=description, color=color, timestamp=ctx.message.created_at)
    embed.set_footer(text=f"Action effectu√©e par {ctx.author.name}", icon_url=ctx.author.avatar.url)
    
    if ctx.guild.icon:
        embed.set_thumbnail(url=ctx.guild.icon.url)

    if member:
        embed.add_field(name="üë§ Membre sanctionn√©", value=member.mention, inline=True)
    if action:
        embed.add_field(name="‚öñÔ∏è Sanction", value=action, inline=True)
    if reason:
        embed.add_field(name="üìú Raison", value=reason, inline=False)
    if duration:
        embed.add_field(name="‚è≥ Dur√©e", value=duration, inline=True)

    return embed

# üéØ V√©rification des permissions et hi√©rarchie
def has_permission(ctx, perm):
    return ctx.author.id == AUTHORIZED_USER_ID or getattr(ctx.author.guild_permissions, perm, False)

def is_higher_or_equal(ctx, member):
    return member.top_role >= ctx.author.top_role

# üì© Envoi d'un log
async def send_log(ctx, member, action, reason, duration=None):
    guild_id = ctx.guild.id
    settings = GUILD_SETTINGS.get(guild_id, {})
    log_channel_id = settings.get("sanctions_channel")

    if log_channel_id:
        log_channel = bot.get_channel(log_channel_id)
        if log_channel:
            embed = create_embed("üö® Sanction appliqu√©e", f"{member.mention} a √©t√© sanctionn√©.", discord.Color.red(), ctx, member, action, reason, duration)
            await log_channel.send(embed=embed)

# üì© Envoi d'un message priv√© √† l'utilisateur sanctionn√©
async def send_dm(member, action, reason, duration=None):
    try:
        embed = create_embed("üö® Vous avez re√ßu une sanction", "Consultez les d√©tails ci-dessous.", discord.Color.red(), member, member, action, reason, duration)
        await member.send(embed=embed)
    except discord.Forbidden:
        print(f"Impossible d'envoyer un DM √† {member.display_name}.")

@bot.command()
async def ban(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre √† bannir.")

    if ctx.author == member:
        return await ctx.send("üö´ Vous ne pouvez pas vous bannir vous-m√™me.")
    if is_higher_or_equal(ctx, member):
        return await ctx.send("üö´ Vous ne pouvez pas sanctionner quelqu'un de votre niveau ou sup√©rieur.")
    if has_permission(ctx, "ban_members"):
        await member.ban(reason=reason)
        embed = create_embed("üî® Ban", f"{member.mention} a √©t√© banni.", discord.Color.red(), ctx, member, "Ban", reason)
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Ban", reason)
        await send_dm(member, "Ban", reason)


@bot.command()
async def unban(ctx, user_id: int = None):
    if user_id is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez sp√©cifier l'ID d'un utilisateur √† d√©bannir.")

    if has_permission(ctx, "ban_members"):
        try:
            user = await bot.fetch_user(user_id)
            await ctx.guild.unban(user)
            embed = create_embed("üîì Unban", f"{user.mention} a √©t√© d√©banni.", discord.Color.green(), ctx, user, "Unban", "R√©int√©gration")
            await ctx.send(embed=embed)
            await send_log(ctx, user, "Unban", "R√©int√©gration")
            await send_dm(user, "Unban", "R√©int√©gration")
        except discord.NotFound:
            return await ctx.send("‚ùå Aucun utilisateur trouv√© avec cet ID.")
        except discord.Forbidden:
            return await ctx.send("‚ùå Je n'ai pas les permissions n√©cessaires pour d√©bannir cet utilisateur.")


@bot.command()
async def kick(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre √† expulser.")

    if ctx.author == member:
        return await ctx.send("üö´ Vous ne pouvez pas vous expulser vous-m√™me.")
    if is_higher_or_equal(ctx, member):
        return await ctx.send("üö´ Vous ne pouvez pas sanctionner quelqu'un de votre niveau ou sup√©rieur.")
    if has_permission(ctx, "kick_members"):
        await member.kick(reason=reason)
        embed = create_embed("üë¢ Kick", f"{member.mention} a √©t√© expuls√©.", discord.Color.orange(), ctx, member, "Kick", reason)
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Kick", reason)
        await send_dm(member, "Kick", reason)

@bot.command()
async def mute(ctx, member: discord.Member = None, duration_with_unit: str = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre √† mute.")
    
    if duration_with_unit is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez pr√©ciser une dur√©e (ex: `10m`, `1h`, `2j`).")

    if ctx.author == member:
        return await ctx.send("üö´ Vous ne pouvez pas vous mute vous-m√™me.")
    if is_higher_or_equal(ctx, member):
        return await ctx.send("üö´ Vous ne pouvez pas sanctionner quelqu'un de votre niveau ou sup√©rieur.")
    if not has_permission(ctx, "moderate_members"):
        return await ctx.send("‚ùå Vous n'avez pas la permission de mute des membres.")
    
    # V√©rification si le membre est d√©j√† en timeout
    if member.timed_out:
        return await ctx.send(f"‚ùå {member.mention} est d√©j√† en timeout.")
    
    # Traitement de la dur√©e
    time_units = {"m": "minutes", "h": "heures", "j": "jours"}
    try:
        duration = int(duration_with_unit[:-1])
        unit = duration_with_unit[-1].lower()
        if unit not in time_units:
            raise ValueError
    except ValueError:
        return await ctx.send("‚ùå Format invalide ! Utilisez un nombre suivi de `m` (minutes), `h` (heures) ou `j` (jours).")

    # Calcul de la dur√©e
    time_deltas = {"m": timedelta(minutes=duration), "h": timedelta(hours=duration), "j": timedelta(days=duration)}
    duration_time = time_deltas[unit]

    try:
        # Tente de mettre le membre en timeout
        await member.timeout(duration_time, reason=reason)
        duration_str = f"{duration} {time_units[unit]}"
        
        # Embeds et r√©ponses
        embed = create_embed("‚è≥ Mute", f"{member.mention} a √©t√© mut√© pour {duration_str}.", discord.Color.blue(), ctx, member, "Mute", reason, duration_str)
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Mute", reason, duration_str)
        await send_dm(member, "Mute", reason, duration_str)
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas la permission de mute ce membre. V√©rifiez les permissions du bot.")
    except discord.HTTPException as e:
        await ctx.send(f"‚ùå Une erreur s'est produite lors de l'application du mute : {e}")
    except Exception as e:
        await ctx.send(f"‚ùå Une erreur inattendue s'est produite : {str(e)}")


@bot.command()
async def unmute(ctx, member: discord.Member = None):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre √† d√©muter.")

    if has_permission(ctx, "moderate_members"):
        await member.timeout(None)
        embed = create_embed("üîä Unmute", f"{member.mention} a √©t√© d√©mut√©.", discord.Color.green(), ctx, member, "Unmute", "Fin du mute")
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Unmute", "Fin du mute")
        await send_dm(member, "Unmute", "Fin du mute")

# Fonction de v√©rification des permissions
async def check_permissions(ctx):
    # V√©rifier si l'utilisateur a la permission "Manage Messages"
    return ctx.author.guild_permissions.manage_messages or ctx.author.id == 1166334752186433567

# Fonction pour v√©rifier si le membre est immunis√©
async def is_immune(member):
    # Exemple de logique d'immunit√© (peut √™tre ajust√©e)
    # V√©rifie si le membre a un r√¥le sp√©cifique ou une permission
    return any(role.name == "Immunit√©" for role in member.roles)

# Fonction pour envoyer un message de log
async def send_log(ctx, member, action, reason):
    log_channel = discord.utils.get(ctx.guild.text_channels, name="logs")  # Remplacer par le salon de log appropri√©
    if log_channel:
        embed = discord.Embed(
            title="Avertissement",
            description=f"**Membre :** {member.mention}\n**Action :** {action}\n**Raison :** {reason}",
            color=discord.Color.orange()
        )
        embed.set_footer(text=f"Avertissement donn√© par {ctx.author}", icon_url=ctx.author.avatar.url)
        await log_channel.send(embed=embed)

# Fonction pour envoyer un message en DM au membre
async def send_dm(member, action, reason):
    try:
        embed = discord.Embed(
            title="‚ö†Ô∏è Avertissement",
            description=f"**Action :** {action}\n**Raison :** {reason}",
            color=discord.Color.red()
        )
        embed.set_footer(text="N'oublie pas de respecter les r√®gles !")
        await member.send(embed=embed)
    except discord.Forbidden:
        print(f"Impossible d'envoyer un message priv√© √† {member.name}")

# Commande de warning
@bot.command()
async def warn(ctx, member: discord.Member, *, reason="Aucune raison sp√©cifi√©e"):
    try:
        if await check_permissions(ctx) and not await is_immune(member):
            # Envoi du message de confirmation
            embed = discord.Embed(
                title="‚ö†Ô∏è Avertissement donn√©",
                description=f"{member.mention} a re√ßu un avertissement pour la raison suivante :\n**{reason}**",
                color=discord.Color.orange()
            )
            embed.set_footer(text=f"Avertissement donn√© par {ctx.author}", icon_url=ctx.author.avatar.url)
            await ctx.send(embed=embed)

            # Envoi du log et du message priv√©
            await send_log(ctx, member, "Warn", reason)
            await send_dm(member, "Warn", reason)
    except Exception as e:
        # Capturer l'exception et afficher le d√©tail dans la console
        print(f"Erreur dans la commande warn: {e}")
        await ctx.send(f"Une erreur s'est produite lors de l'ex√©cution de la commande.")


# Token pour d√©marrer le bot (√† partir des secrets)
# Lancer le bot avec ton token depuis l'environnement  
keep_alive()
bot.run(token)
